name: "CI/CD with manual approval Oppervisions web site"

on:
  push:
    branches:
      - main
jobs:
#  test:
#    name: Run Tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@4
#      # install dependecies
#      - name: Install dependencies
#        run: npm install

      # Run Tests
      #- name: Run Tests
      #  run: npm test
  deploy_dev:
    name: Deploy to Netlify DEV
    runs-on: ubuntu-latest
    #needs: test
    environment:
      name: dev
      url: https://oppervision.netlify.app
    steps:
      - uses: actions/checkout@v4
       # install dependecies
      - name: Install dependencies
        run: npm install
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      - name: deploy to DEV
        run: netlify deploy --dir=dist --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --branch=dev
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  approve_prod:
    name: Wait for Approval â†’ Deploy to PROD
    runs-on: ubuntu-latest
    needs: deploy_dev
    environment:
      name: prod
      url: https://yoursite.netlify.app
    steps:
      - name: Wait for manual approval
        uses: fjogeleit/http-request-action@v1
        with:
          url: https://example.com
        # In real scenario you can replace with `workflow_dispatch` or `environment` protection
        # so you approve manually in GitHub UI

      - uses: actions/checkout@v4
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      - name: Deploy to PROD
        run: netlify deploy --dir=dist --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
